---
- name: Install python3-hvac package
  ansible.builtin.apt:
    name: python3-hvac
    state: present
    update_cache: true

- name: Display from Vault Call Details
  ansible.builtin.debug:
    msg:
      - "Vault URL: {{ vault.default.hcp.vault.url }}"
      - "Vault Secret path: {{ vault_secret_source_dir | default(vault_secret_source_path, true) }}"
      - "Environment: {{ env }}"
      - "Secret Type: {{ secret_type }}"
      - "Destination File Path: {{ secret_destination_dir | default(secret_destination_path, true) }}"

- name: Read and write secrets when secret_type is dir
  when: secret_type == "dir"
  block:
    - name: List all secrets under the path
      community.hashi_vault.vault_list:
        url: "{{ vault.default.hcp.vault.url }}"
        token: "{{ lookup('env', 'VAULT_TOKEN') }}"
        path: "{{ env }}/metadata/{{ vault_secret_source_dir }}"
      register: vault_keys
      no_log: true

    - name: Read each secret from Vault
      community.hashi_vault.vault_kv2_get:
        url: "{{ vault.default.hcp.vault.url }}"
        token: "{{ lookup('env', 'VAULT_TOKEN') }}"
        engine_mount_point: "{{ env }}"
        path: "{{ vault_secret_source_dir }}/{{ item }}"
      loop: "{{ vault_keys.data.data['keys'] }}"
      register: secrets_data
      no_log: true

    - name: Write each secret to file
      ansible.builtin.copy:
        dest: "{{ secret_destination_dir }}/{{ item.item }}"
        owner: "{{ service_identifier }}"
        group: "{{ service_group }}"
        mode: "0640"
        content: "{{ item.secret.key if item.secret.key is defined else item.secret }}"
      loop: "{{ secrets_data.results }}"
      no_log: true
      notify:
        - Restart service

- name: Read the latest version of a KV v2 secret from Vault using Token Auth
  community.hashi_vault.vault_kv2_get:
    url: "{{ vault.default.hcp.vault.url }}"
    engine_mount_point: "{{ env }}"
    path: "{{ vault_secret_source_path }}"
    auth_method: token
    token: "{{ lookup('env', 'VAULT_TOKEN') }}"
  register: vault_response # never to be store in ansible fact, only fetch within the task
  no_log: true # no_log to be used whenever we are registering any sensitive info in playbook
  when: secret_type in ["key", "json", "environment", "base64"]

- name: Save the fetched key secret to the file
  ansible.builtin.copy:
    content: "{{ vault_response.secret['key'] }}"
    dest: "{{ secret_destination_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_group }}"
    mode: "0640"
  when: secret_type == "key"
  notify:
    - Restart service

- name: Save the fetched json secret to the file
  ansible.builtin.copy:
    content: "{{  vault_response.secret }}"
    dest: "{{ secret_destination_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_group }}"
    mode: "0640"
  when: secret_type == "json"
  notify:
    - Restart service

- name: Save the fetched env secret to the file
  ansible.builtin.copy:
    content: |
      {% for key, value in vault_response.secret.items() %}
      {{ key }}={{ value }}
      {% endfor %}
    dest: "{{ secret_destination_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_group }}"
    mode: "0640"
  when: secret_type == "environment"
  notify:
    - Restart service

- name: Save the fetched Base64-encoded secret to the file
  ansible.builtin.copy:
    content: "{{ vault_response.secret['key'] | b64decode }}"
    dest: "{{ secret_destination_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_group }}"
    mode: "0640"
  when: secret_type == "base64"
  notify:
    - Restart service
